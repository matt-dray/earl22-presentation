---
title: '{a11ytables}'
subtitle: 'Originally for #EarlConf, Sep 2022'
author: 'Matt Dray, Civil Service'
format:
  revealjs: 
    theme: [default, earl22.scss]
    background-image: 'images/bg_cells.png'
    background-size: '250px'
    background-repeat: 'repeat'
execute:
  echo: true
  eval: false
---

```{r setup}
#| include: false
#| eval: true
options(width = 80)
library(a11ytables)
```

## tl;dr {.center}

:::: {.columns}

::: {.column width="70%"}
Generate best-practice spreadsheets with help from {a11ytables}

<br>

`r fontawesome::fa('globe')` [co-analysis.github.io/a11ytables](https://co-analysis.github.io/a11ytables)

`r fontawesome::fa('github')` [github.com/co-analysis/a11ytables](https://www.github.com/co-analysis/a11ytables)
:::

::: {.column width="30%"}
![](images/qr_a11ytables-docs.png){alt="QR code that points to the documentation website of the R package 'a11ytables'."}
:::

::::

::: {.notes}
* I'm not talking about anything complex in this talk, but in case you get bored or feel sleepy, you only need to take a photo of this page.
* Yes, I want to tell you about the package, but also I'm tricking you: I want to tell you about the importance of inclusivity, taking the initiative and fixing things.
* So keep listening for more about that.
:::

## Ahoy {.center}

:::: {.columns}

::: {.column width="70%"}
* R for reproducibility (official)
* Off-piste R (personal)

<br>

`r fontawesome::fa('globe')` [matt-dray.com](https://www.matt-dray.com) 
:::

::: {.column width="30%"}
![](images/mattdray-avatar.png){alt="16 by 16 pixelated image of the author's face, which has big eyebrows and a goatee."}
:::

::::

::: {.notes}
* I work in the Civil Service and obviously nothing interesting is happening this week in government, so I decided to come to EARL.
* I'm talking today about something I made in an official capacity.
* I personally can be found elsewhere in an unofficial capacity (e.g. website and Twitter).
* You can [read blogposts at rostrum.blog](https://www.rostrum.blog/) about building an interactive roguelike videogame in R; making a Twitterbot with R and GitHub Actions; trolling about assignment operators; and more.
:::

# An opportunity 

::: {.notes}
* The UK government has an extremely pressing problem... spreadhseets.
* Who has opened an 'official' spreadsheet and immediately winced?
* Yes, they sometimes hurt my eyes too, but rather than complain, maybe we can see the opportunity. 
* I'll show an example of a government spreadsheet that could be improved. It was one of the first ones that came up in my search of GOV.UK statistics.
* The intent is to demonstrate opportunity, not to call anyone out. The maintainer of the statistics knows I'm talking about this.
:::

## {auto-animate="true" auto-animate-easing="ease-in-out" background-image="images/website_defra-eggs.png" alt="Screenshot of the GOV.UK webpage containing data released as part of the latest UK egg statistics, which has the National Statistics badge."}

::: {.clippy-speech .absolute top="120%" left="120%" data-id="speech" alt="A yellow speech bubble that says 'it looks like you're trying to improve a spreadsheet', which is being spoken by the Microsoft Office mascot Clippy."}
It looks like you're trying to improve a spreadsheet.
:::

![](images/not-clippy.png){.absolute top="120%" left="120%" width="100"  alt="An unofficial version of the Microsoft Office mascot Clippy, a paperclip with eyes."}

::: {.notes}
* Defra's ['Latest UK egg statistics'](https://www.gov.uk/government/statistics/egg-statistics).
* Mundane? Definitely a classic government spreadsheet.
* Collects data on egg production and prices from a survey.
* Branded as National Statistics. That's important.
:::

## {auto-animate="true" auto-animate-easing="ease-in-out" background-image="images/website_defra-eggs.png" alt="Screenshot of the GOV.UK webpage containing data released as part of the latest UK egg statistics, which has the National Statistics badge."}

::: {.clippy-speech .absolute top="10%" left="45%" data-id='speech' alt="A yellow speech bubble that says 'it looks like you're trying to improve a spreadsheet', which is being spoken by the Microsoft Office mascot Clippy."}
It looks like you're trying to improve a spreadsheet.
:::

![](images/not-clippy.png){.absolute top="30%" left="65%" width="100" alt="An unofficial version of the Microsoft Office mascot Clippy, a paperclip with eyes."}

::: {.notes}
* This is unofficial use of the celebrity digital assistant, Clippy (apologies to Microsoft staff in the audience, please don't sue me).
* Yes, for the lolz, but also because I want to suggest some areas to improve in a non-threatening manner (depending on how threatening you think Clippy is).
:::

## {auto-animate="true" auto-animate-easing="ease-in-out" background-image="images/spreadsheet_old-eggs-1.png" alt="Screenshot of an Excel file that contains egg data. There are some accessibility issues such as blank cells. Other issues include inconsistent cell borders."}

![](images/not-clippy.png){.absolute top="3%" left="55%" width="100" alt="An unofficial version of the Microsoft Office mascot Clippy, a paperclip with eyes."}

::: {.notes}
* This is the 'UK egg packing station throughput and prices dataset' spreadsheet.
* First tab: 'Packers'.
* Being nitpicky, how would this fare for machine readability? Screenreaders?
* Look out for:
  - empty rows, columns, cells (including A1)
  - gridlines sometimes missing, sometimes not
  - triple headers
  - centred values (mostly)
  - the number of decimals varies (though Excel hides this)
  - there's some stray values with no explanation
:::

## {auto-animate="true" auto-animate-easing="ease-in-out" background-image="images/spreadsheet_old-eggs-2.png" alt="Screenshot of an Excel file that contains egg data. There are some accessibility issues such as blank cells. Other issues include unlabelled footnotes."}

![](images/not-clippy.png){.absolute top="75%" left="45%" width="100" alt="An unofficial version of the Microsoft Office mascot Clippy, a paperclip with eyes."}

::: {.notes}
* Second tab: 'Packers_Annual'.
* Look out for same as previous tab, plus:
  - notes in a footer, not labelled
  - two 'year' columns?
  - some rogue values on the far right
  - shorthand not fully conforming to guidance ('c' rather than '[c]'?)
:::

## {background-image="images/spreadsheet_old-eggs-3.png" auto-animate="true" auto-animate-easing="ease-in-out" alt="Screenshot of an Excel file that contains egg data. This is a tab labelled 'information' that contains important information, except it's the final tab and the data are held in text boxes rather than in cells."}

![](images/not-clippy.png){.absolute top="25%" left="27%" width="100" alt="An unofficial version of the Microsoft Office mascot Clippy, a paperclip with eyes."}

::: {.notes}
* Third tab: 'Information'.
* Look out for:
  - important information on the last page instead of a cover or explicit annex
  - information is in text boxes rather than cells
  - 'updated' information is in a different place
  - GOV.UK link way off to the right
:::

# Guidance

::: {.notes}
* Maybe you can see the things you'd like to fix, maybe some are obvious, maybe some are more subjective.
* But there are a thousand reasons why teams can't just improve things overnight, like lack of staff, lack of time, inertia from pre-existing point-and-click solutions, etc.
* However, there is a place to start: some codified and exhaustive guidance on the preferred outcomes.
:::

## {background-image="images/website_af-spreadsheet.png" alt="Screenshot of a page of the UK government's Analysis Function website, which contains guidance called 'releasing statistics in spreadsheets'."}

::: {.notes}
* The Analysis Function has a webpage with [some bumper advice](https://analysisfunction.civilservice.gov.uk/policy-store/releasing-statistics-in-spreadsheets/) on releasing data in spreadsheet format. This was coordinated by Hannah Thomas.
* This is important role of the newly-formed Analysis Function: unify guidance across the analytical professions. 
* Promotes consistency and usability, but particularly accessibility.
* This guidance is being used already in publications.
:::

## {background-image="images/website_af-checklist.png" alt="Screenshot of a page of the UK government's Analysis Function website, which contains guidance called 'making spreadsheets accessible: a checklist of the basics'."}

::: {.notes}
* The Analysis Function also has a handy [checklist of the basics for accessibility](https://analysisfunction.civilservice.gov.uk/policy-store/making-spreadsheets-accessible-a-brief-checklist-of-the-basics/).
* This gives a quick lookup for the minimum requirements and more.
:::

## {background-image="images/spreadsheet_empathy-hidden.png" alt="Screenshot of an Excel workbook where all cells of the current sheet are filled black, obscuring the text. The user is expected to retrieve information from the sheet to empathise with users of assistive technology, etc."}

::: {.notes}
* Hannah also wrote [a great blog](https://analysisfunction.civilservice.gov.uk/blog/accessibility-empathy-for-users-of-spreadsheets/) about accessibility empathy for spreadsheet users.
* Can you find information in a spreadsheet where all the cells are blacked out?
* It 'shows you what it is like trying to navigate a data table when you cannot see the layout. 
* Gives 'some idea of the issues faced by users with visual impairments.'
* Hannah also runs an accessibility clinic for civil servants to chat through concerns or ideas.
:::

## {background-image="images/website_rap-strategy.png" alt="Screenshot of the UK government's Analysis Function website, on a page that contains the Reproducible Analytical Pipelines (RAP) strategy."}

::: {.notes}
* We can help make users' lives better with better spreadsheets. But there's also a way to make out lives easier as producers.
* [Reproducible Analytical Pipelines (RAP)](https://analysisfunction.civilservice.gov.uk/support/reproducible-analytical-pipelines/) is a grassroots movement that's been bubbling around UK government for a few years.
* RAPs are 'automated statistical and analytical processes [that] incorporate elements of software engineering best practice to ensure that the pipelines are reproducible, auditable, efficient, and high quality.'
* There's now [a formal strategy for adoption](https://analysisfunction.civilservice.gov.uk/policy-store/reproducible-analytical-pipelines-strategy/) that should empower publishers to improve their outputs.
:::

# Building a tool

::: {.notes}
* Many teams have applied the advice to their publications
* There are still opportunities
* How can we make things easier:
  - as part of a RAP (we're not converting 'bad' spreadsheets, we're adding a tool into the process)?
  - for entry-level coders?
  - by taking into account the realities of 'at the coalface' production?
  - by taking the initiative?
  - to prevent duplication of effort?
:::

## Requirements {.center}

1. Simple
2. Opinionated
3. Compliant
4. Known

::: {.notes}
1. Simple user-interface/API, internal structure should be understood by devs
2. Decisions should be taken for you to help speed things up and maintain consistency.
3. The whole point is to meet the guidance, {a11ytables} accessibility checklist vignette.
4. Should try to be a generic cross-government, unified solution to prevent duplicated effort (perhaps easier for my department, which is a the centre of government); it needs to put out there for discussion and improvement. (Also because I wanted the acronym to spell 'SOCK'.)
:::

## {background-image="images/website_gptables.png" alt="Screesnhot of the documentation website for the Python package called 'gptables', which is open on the README page."}

::: {.notes}
* [Documentation](https://gptables.readthedocs.io/en/latest/)
* Written for Python, convert pandas dataframes.
* {a11ytables} was created to comply with the _latest_ best practice guidance for releasing stats in spreadsheets, which gptables did not do at the time.
* Can be accessed from R via the {reticulate} package, but requires a Python installation and understanding of {reticulate}.
* Slight differences between {a11ytables} and gptables exist, hopefully will clear these up.
:::

## {background-image="images/website_a11ytables.png" alt="Screesnhot of the documentation website for the R package called 'a11ytables', which is open on the README page."}

::: {.notes}
* 'A11y' is short for 'accessibility' (there's 11 letters betrween the 'A' and the 'Y').
* This is the [documentation website (co-analysis.github.io/a11ytables/)](https://co-analysis.github.io/a11ytables/),  made with {pkgdown}.
* Bottom-up to solve my own needs, with wider implications.
1. Simple: interface has only two main functions; only two dependencies are {openxlsx} and {pillar}; familiarity of dataframes and pipes; user brings data and information, {a11ytables} does the rest.
2. Opinionated: the package makes some choices for you so you don't have to think very hard; some flexibly is lost, not all spreadsheets are simple, but you can intervene.
3. Compliant: a vignette compares the package's functionality to to the accessibility checklist in the guidance and shows that it meets the guidance.
4. Known: have been sharing this in cross-government fora, Twitter, government presentation champions meeting, Scottish government. It' sbeing used for sure in MoJ, ONS, Scottich Government and Cabient Office.
:::

# Fresh eggs?

::: {.notes}
* A demo: let's use {a11ytables} on the data from the published eggs spreadsheet.
* Walkthrough, starting with package installation.
* You can't make a best practice spreadsheet without breaking some eggs, lololol.
:::

## Install {auto-animate="true"}

```{r}
install.packages("remotes")  # if not yet installed

remotes::install_github(
  "co-analysis/a11ytables",
  build_vignettes = TRUE
)

# also installs {openxlsx}, {pillar}

library(a11ytables)
```

::: {.notes}
* Package is GitHub only, version 0.1.
* Useable but still more to do.
* CRAN is a future goal, maybe.
:::

## Overview {auto-animate="true"}

```{r}
create_a11ytable() |>
  generate_workbook() |>
  openxlsx::saveWorkbook("file.xlsx")
```

::: {.notes}
1. Organise all the required information into a special dataframe with additional class 'a11ytable'.
1. Convert to {openxlsx} 'Workbook' class with structure and style information.
1. Write that object to an xlsx file.
:::

## Overview {auto-animate="true"}

```{r}
create_a11ytable(
  tab_titles, sheet_types, sheet_titles, # required char vectors
  blank_cells, sources,                  # optional char vectors
  tables                                 # required listcol of dataframes
) |>
  generate_workbook() |>
  openxlsx::saveWorkbook("file.xlsx")
```

::: {.notes}
* The `create_a11ytable()` function takes a few arguments:
  - `tab_titles` is a required character vector for the text that goes on the tabs
  - `sheet_types` is a required character vector (one of `"cover"`, `"contents"`, `"notes"`, `"tables"`) that provides information about how the sheet will be styled
  - `sheet_titles` is a required character vector of the worksheet titles that will go in cell A1
  - `blank_cells` optional character vector of meta-information that explains the meaning of any blank cells in the sheet
  - `sources` is an optional character vector of meta-information that contains 
  - `tables` is a required list-column of dataframes that contain the main bulk of each sheet (stats tables are obviously tables, but the cover and notes are also given as tables; you also provide the cover as a dataframe, where each row becomes a subsection with a title and body)
:::

## Prep inputs {auto-animate="true"}

```{r}
#| eval: true
source("eggs/eggs.R")  # for demo purposes
ls()  # available objects
```

::: {.notes}
* I pre-wrote some code to extract data from the eggs spreadsheet.
* You can find the code and original spreadsheet in [the repo that hosts these slides](https://www.github.com/matt-dray/earl22-presentation).
* Importantly, I didn't mimic the whole process of production for this example; I just copied the data out of the pre-existing spreadsheet.
* The code outputs some objects that are ready to be passed to the arguments of `create_a11ytable()`.
* I recommend generating each object outside of the call to `create_a11ytable()` where possible; it keeps things cleaner.
* For smaller spreadsheets it would be fine to provide the arguments in the function call itself.
:::

## Prep inputs {auto-animate="true"}

```{r}
#| eval: true
source("eggs/eggs.R")  # for demo purposes
ls()  # available objects
egg_sheet_titles[1:4]  # first few titles
class(egg_tables)  # a list of tables
```

::: {.notes}
* Here's `the sheet_titles` object, which is a required character vector that contains the titles of each worksheet, for example.
:::

## Combine {auto-animate="true"}

```{r}
create_a11ytable()
```

::: {.notes}
* Now we can pass our egg objects to the arguments of `create_a11ytable()`.
:::

## Combine {auto-animate="true"}

```{r}
#| eval: true
create_a11ytable(
  tab_titles   = egg_tab_titles, 
  sheet_types  = egg_sheet_types, 
  sheet_titles = egg_sheet_titles,
  blank_cells  = egg_blank_cells, 
  sources      = egg_sources,
  tables       = egg_tables
) -> egg_at
```

::: {.notes}
* Basically, each arg becomes a column in a dataframe.
* User is warned and/or errors raised and/or corrections applied if the provided information is insufficient.
* User provides the info, function does the rest.
:::

## Combine {auto-animate="true"}

```{r}
#| eval: true
create_a11ytable(
  tab_titles   = egg_tab_titles, 
  sheet_types  = egg_sheet_types, 
  sheet_titles = egg_sheet_titles,
  blank_cells  = egg_blank_cells, 
  sources      = egg_sources,
  tables       = egg_tables
) -> egg_at

class(egg_at)
```

::: {.notes}
* You can see that the object gets the special 'a11ytables' S3 class, which helps with validation.
* But it also has classes of 'tbl' (i.e. a {tibble} dataframe) and classic 'data.frame'.
* This means you can manipulate the output much like any dataframe object.
:::

## A dataframe! {auto-animate="true"}

```{r}
#| echo: true
#| eval: true
egg_at
```

::: {.notes}
* Familiar dataframe structure holds all the information.
* You can see a row per sheet.
* Each argument has become a column.
* The list of dataframes has become a list-column.
:::

## One row, one sheet {auto-animate="true"}

```{r}
#| echo: true
#| eval: true
str(egg_at[egg_at$tab_title == "Table_2", ] )
```

::: {.notes}
* Each row of the a11ytable is the content required to create a worksheet.
* Here's the information needed for the sheet that contains Table 2.
* You can see the character vectors contain the information needed in that sheet, along with the dataframe that contains the stat table itself.
:::

## Convert to Workbook {auto-animate="true"}

```{r}
#| eval: true
egg_wb <- generate_workbook(egg_at)
class(egg_wb)
```

::: {.notes}
* Next step is to turn the a11ytable-class object into an {openxlsx} Workbook-class object.
* This adds all the required structure and style information without the user needing to do anything.
* Works with a series of underlying `add_*()` functions to add elements to each sheet and `style_*()` functions that do simple stuff like adjust the font, but also dynamically change column widths and detect numeric columns that are stored as character due to notes or shorthand.
:::

## Structured, styled {auto-animate="true"}

```{r}
#| eval: true
egg_wb
```

::: {.notes}
* Doesn't really matter what the Workbook-class object looks like, but the summary shows the worksheets that have been created and some of the custom changes, like row heights.
:::

## Write {auto-animate="true"}

```{r}
openxlsx::saveWorkbook(
  egg_wb,
  "eggs/2022-07-28_eggs-packers_test.xlsx",
  overwrite = TRUE
)
```

::: {.notes}
* {openxlsx} already has a function to write a Workbook-class object to disk.
* This saves us hassle.
* There's also a handy `openXL()` function for opening a temporary copy.
:::

# Output 

## {auto-animate="true" auto-animate-easing="ease-in-out" background-image="images/spreadsheet_new-eggs-cover.png" alt="Screenshot of an Excel file, a reinterpretation of the eggs stats from earlier in the presentation. This is the cover page with information structured and styled for usability and accessibility."}

![](images/not-clippy-heart.png){.absolute top="40%" left="35%" width="100" alt="An unofficial version of the The Microsoft Office mascot Clippy, a paperclip with eyes, with a red heart above his head."}

::: {.notes}
* Most of this information was in the 'information' tab or footnotes of the original spreadsheet.
* Now it's up front and provides an introduction to the workbook.
* Note the intentional simplicty in structure and style, which is in the best practice guidance.
* Makes it more accessible, useable, consistent.
* Note on the cover that:
  - the font is Arial 12
  - the title is in larger font and in A1
  - the font subsection headers are also adjusted
  - the subsection titles are in tall rows to create the illusion of whitespace without leaving an empty row
:::

## {auto-animate="true" auto-animate-easing="ease-in-out" background-image="images/spreadsheet_new-eggs-contents.png" alt="Screenshot of an Excel file, a reinterpretation of the eggs stats from earlier in the presentation. This is the contents page, which lets users navigate the workbook."}

![](images/not-clippy-heart.png){.absolute top="2%" left="25%" width="100" alt="An unofficial version of the The Microsoft Office mascot Clippy, a paperclip with eyes, with a red heart above his head."}

::: {.notes}
* Note in the contents that:
  - there is up-front screenreader-friendly information about the number of tables in the sheet
  - the table has no empty rows or columns
  - the columns have clear header names indicated by bold font
  - the table is marked up as a table (there's a small marker in the lower right to indicate this), which is important
:::

## {auto-animate="true" auto-animate-easing="ease-in-out" background-image="images/spreadsheet_new-eggs-notes.png" alt="Screenshot of an Excel file, a reinterpretation of the eggs stats from earlier in the presentation. This is the notes page, which centralises and numbers the notes in the workbook."}

![](images/not-clippy-heart.png){.absolute top="20%" left="35%" width="100" alt="An unofficial version of the The Microsoft Office mascot Clippy, a paperclip with eyes, with a red heart above his head."}

::: {.notes}
* On the notes page, note that:
  - the theming follows on from the cover and contents
  - the notes are in the standardised style of 'note x' written in square brackets
:::

## {auto-animate="true" auto-animate-easing="ease-in-out" background-image="images/spreadsheet_new-eggs-t1.png" alt="Screenshot of an Excel file, a reinterpretation of the eggs stats from earlier in the presentation. This is Table 5, which demonstrates how the 'a11ytables' package automatically widens columns with long names and also right-aligns numeric columns even if they contain text, like shorthand for missing or confidential data."}

![](images/not-clippy-heart.png){.absolute top="3%" left="35%" width="100" alt="An unofficial version of the The Microsoft Office mascot Clippy, a paperclip with eyes, with a red heart above his head."}

::: {.notes}
* Note in Table 1 that:
  - the theming again follows on from the other sheets
  - there is a new metadata element that provides the data source
  - the table has been dynamically placed in row 4 this time, after the three pre-table elements (was only two for the contents and notes pages)
  - the column has been judged by {a11ytables} to be numeric, despite the shorthand it contains, and so it has been correctly right-aligned
:::

## {auto-animate="true" auto-animate-easing="ease-in-out" background-image="images/spreadsheet_new-eggs-t2.png" alt="Screenshot of an Excel file, a reinterpretation of the eggs stats from earlier in the presentation. This is Table 2, which demonstrates how the meta information above a table can be inserted dynamically without leaving blank rows. There is a row with the message that 'this table contains notes', which was absent in Table 1."}

![](images/not-clippy-heart.png){.absolute top="5%" left="35%" width="100" alt="An unofficial version of the The Microsoft Office mascot Clippy, a paperclip with eyes, with a red heart above his head."}

::: {.notes}
* Note in Table 2 that:
  - this table has a note in it, so there's a new dynamically generated pre-table metadata row so users of screenreaders can be made aware early 
  - the placement of the table is again dynamic; there are four pre-table metadata elements, so the table begins in row 5
:::

## {auto-animate="true" auto-animate-easing="ease-in-out" background-image="images/spreadsheet_new-eggs-t5.png" alt="Screenshot of an Excel file, a reinterpretation of the eggs stats from earlier in the presentation. This is Table 1, which has a header with information that's useful for screenreaders, like 'this worksheet contains 1 table'. The data are in a flat table with no blank cells.."}

![](images/not-clippy-heart.png){.absolute  top="30%" left='15%' width="100" alt="An unofficial version of the The Microsoft Office mascot Clippy, a paperclip with eyes, with a red heart above his head."}

::: {.notes}
* Table 5 has something different again, which is that the long header has led to an opinionated decision for the column to be widened
* An extra pre-table metadata row would also appear if we had provided information to the `blank_cells` argument of `create_a11ytable()`
:::

# But 

## Outputs are imperfect {.center}

* Final tweaks needed
* Assumes simple spreadsheets
* Garbage in, garbage out

::: {.notes}
* The package doesn't get you a 100% compliant output.
* To keep the package simple, certain choices may not suit the user; some extra editing of the a11ytable or Workbook may be required, but this can be made part of the analyst pipeline.
* The package is opinionated for simplicity and is not completely flexible as a result (e.g. each cover subsection has only a single body row, the pre-table metadata is only table count, note presence, blank-cell meaning and data source).
* Thousands of spreadsheets are produced; there's likely more complicated ones out there.
* Can't completely protect from bad user input.
:::

## Clunk! {.center}

* {openxlsx} has limitations
* Output isn't ODS
* Prep is fiddly

::: {.notes}
* {openxlsx} is versatile, but some things are tricky (placeholder zeroes in decimals, filling in file properties, etc), but I'm keeping an eye on {openxlsx2}.
* In particular, published spreadsheets should be in an open format, but {openxlsx} nor other packages write Workbook-class objects to ODS.
* A more focused example: notes are pretty clunky to add; might be a better solution?
:::

## Future {.center}

* Bugfixes, requests, user testing
* YAML input
* Converge with gptables

::: {.notes}
* There's plenty to be done to improve the package.
* As ever, user feedback and bugs; particularly testing internally with developers and externally with people who use assistive tech.
* Perhaps a new, more readable input option, like YAML, to arrange input to `create_a11ytable()`.
* gptables and a11ytables should converge as much as possible so that analyst users can expect the same compliant output despite which tool they use. What are the optimum opinionated features?
* The problem is I have no time! PRs always welcome.
:::

# So

::: {.notes}
* So what am I telling you to do?
:::

## Can you {.center}

* improve user experience?
* make it easier for you?
* create common tools?

::: {.notes}
* Improve accessibility.
* Simplify creation of complex things.
* Stop divided, wasted effort to solve the same problem.
:::

## tl;dr {.center}

:::: {.columns}

::: {.column width="70%"}
Generate best-practice spreadsheets with help from {a11ytables}

<br>

`r fontawesome::fa('globe')` [co-analysis.github.io/a11ytables](https://co-analysis.github.io/a11ytables)

`r fontawesome::fa('globe')` [matt-dray.com](https://www.matt-dray.com) 
:::

::: {.column width="30%"}
![](images/qr_a11ytables-docs.png){alt="QR code that points to the documentation website of the R package 'a11ytables'."}
:::

::::

## 

## Credits {.center}

* Guidance docs: Hannah Thomas, Analysis Function
* gptables: Rowan Hemsi and contributors
* {a11ytables} contributors: Tim Taylor, Matt Kerlogue
* {openxlsx} and {pillar} contributors/maintainers
* [OpenMoji](https://openmoji.org/): paperclip, heart (edited, [CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/#))

## {background-image="images/website_smungs.png" alt="Screenshot of the website for the book 'Spreadsheet Munging Strategies' by Duncan Garmonsway, which advises people how to extract data from spreadsheets using his packages 'unpivotr' and 'tidyxl'."}

::: {.notes}
* The idea is to fix the problem at the source.
* But this won't be possible for older spreadsheets and for pipelines that have inertia.
* What can you do?
* [Spreadsheet Munging Strategies](https://nacnudus.github.io/spreadsheet-munging-strategies/) by another colleague, [Duncan Garmonsway](https://nacnudus.github.io/duncangarmonsway/).
* Untidy, inaccessible spreadsheets pose a particular problem for further analysis.
* See Duncan's [{tidyxl}](https://nacnudus.github.io/tidyxl/index.html) and [{unpivotr}](https://nacnudus.github.io/unpivotr/) R packages.
* I want to help limit the need for these tools (sorry Duncan).
:::
