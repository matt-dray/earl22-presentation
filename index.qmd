---
title: '{a11ytables}'
subtitle: 'EARL, September 2022'
author: 'Matt Dray, Civil Service'
format:
  revealjs: 
    theme: [default, earl22.scss]
    footer: 'WORK IN PROGRESS'
    background-image: 'images/bg_cells.png'
    background-size: '250px'
    background-repeat: 'repeat'
execute:
  echo: true
  eval: false
---

```{r setup}
#| include: false
#| eval: true
options(width = 80)
library(a11ytables)
```

## tl;dr {.center}

:::: {.columns}

::: {.column width='70%'}
Generate best-practice spreadsheets with [{a11ytables}](https://www.co-analysis.github.io/a11ytables)

Make the world a better place (marginally)
:::

::: {.column width='30%'}
![](images/qr_a11ytables-docs.png){alt="QR code that points to the documentation website of the R package 'a11ytables'."}
:::

::::

::: {.notes}
* The package helps bring automation, consistency and reproducibility to usable spreadsheets; it does the hard work for you.
* It can make your life easier.
* But the talk is also about inclusivity, taking the initiative and fixing things.
* Which makes everyone's lives better.
:::

## Ahoy {.center}

:::: {.columns}

::: {.column width='70%'}
I like R for reproducibility 

(And for memes)

`r fontawesome::fa('twitter')` [@mattdray](https://www.twitter.com/mattdray) `r fontawesome::fa('globe')` [matt-dray.com](https://www.matt-dray.com) 
:::

::: {.column width='30%'}
![](images/mattdray-avatar.png){alt="16 by 16 pixel image of the author's face, which has big eyebrows and a goatee."}
:::

::::

::: {.notes}
* I work in UK government and I'm talking about something I made in that official capacity.
* I personally can be found elsewhere in an unofficial capacity.
* You can [read blogposts](https://www.rostrum.blog/) about building an interactive roguelike videogame in R; making a Twitterbot with R and GitHub Actions; trolling about assignment operators; and more.
:::

# An opportunity 

::: {.notes}
* Who has opened an 'official' spreadsheet and immediately winced?
* Yes, they sometimes hurt my eyes too, but rather than complain, maybe we can see the opportunity. 
* I'll show an example of a government spreadsheet that could be improved. It was one of the first ones that came up in my search of GOV.UK statistics.
* The intent is to demonstrate opportunity, not to call anyone out. The maintainer of the statistics knows I'm talking about this.
:::

## {auto-animate=true auto-animate-easing='ease-in-out' background-image='images/website_eggs.png'}

::: {.clippy-speech .absolute top='120%' left='120%' data-id='speech'}
It looks like you're trying to improve a spreadsheet.
:::

![](images/not-clippy.png){.absolute top='120%' left='120%' width='100'}

## {auto-animate=true auto-animate-easing='ease-in-out' background-image='images/website_eggs.png'}

::: {.clippy-speech .absolute top='10%' left='45%' data-id='speech'}
It looks like you're trying to improve a spreadsheet.
:::

![](images/not-clippy.png){.absolute top='30%' left='65%' width='100'}

::: {.notes}
* Defra's ['Latest UK egg statistics'](https://www.gov.uk/government/statistics/egg-statistics).
* Mundane? Definitely a classic government spreadsheet.
* Collects data on egg production and prices from a survey.
* Branded as National Statistics. That's important.
:::

## {auto-animate=true auto-animate-easing='ease-in-out' background-image='images/spreadsheet_old-eggs-1.png'}

![](images/not-clippy.png){.absolute top='3%' left='55%' width='100'}

::: {.notes}
* This is the 'UK egg packing station throughput and prices dataset' spreadsheet.
* First tab: 'Packers'.
* Being nitpicky, how would this fare for machine readability? Screenreaders?
* Look out for:
  - empty rows, columns, cells (including A1)
  - gridlines sometimes missing, sometimes not
  - triple headers
  - centred values (mostly)
  - the number of decimals varies (though Excel hides this)
  - there's some stray values with no explanation
:::

## {auto-animate=true auto-animate-easing='ease-in-out' background-image='images/spreadsheet_old-eggs-2.png'}

![](images/not-clippy.png){.absolute top='75%' left='45%' width='100'}

::: {.notes}
* Second tab: 'Packers_Annual'.
* Look out for same as previous tab, plus:
  - notes in a footer, not labelled
  - two 'year' columns?
  - some rogue values on the far right
  - shorthand not fully conforming to guidance ('c' rather than '[c]'?)
:::

## {background-image='images/spreadsheet_old-eggs-3.png' auto-animate=true auto-animate-easing='ease-in-out'}

![](images/not-clippy.png){.absolute top='25%' left='27%' width='100'}

::: {.notes}
* Third tab: 'Information'.
* Look out for:
  - important information on the last page instead of a cover or explicit annex
  - information is in text boxes rather than cells
  - 'updated' information is in a different place
  - GOV.UK link way off to the right
:::

# Support 

::: {.notes}
* Maybe you can see the things you'd like to fix, maybe some are obvious, maybe some are more subjective.
* But there are a thousand reasons why teams can't just improve things overnight, like lack of staff, lack of time, inertia from pre-existing point-and-click solutions, etc.
* However, there is a place to start: some codified and exhaustive guidance on the preferred outcomes.
:::

## {background-image='images/website_spreadsheet-guidance-af.png'}

::: {.notes}
* The Analysis Function has a webpage with [some bumper advice](https://analysisfunction.civilservice.gov.uk/policy-store/releasing-statistics-in-spreadsheets/) on releasing data in spreadsheet format. This was coordinated by Hannah Thomas.
* This is important role of the newly-formed Analysis Function: unify guidance across the analytical professions. 
* Promotes consistency and usability, but particularly accessibility.
:::

## {background-image='images/spreadsheet_empathy-hidden.png'}

![](images/not-clippy-inverse.png){.absolute top='70%' left='95%' width='100'}

::: {.notes}
* On accessibility in particular, Hannah wrote [a great blog](https://analysisfunction.civilservice.gov.uk/blog/accessibility-empathy-for-users-of-spreadsheets/) about accessibility empathy for spreadsheet users.
* Can you find information in a spreadsheet where all the cells are blacked out?
* It 'shows you what it is like trying to navigate a data table when you cannot see the layout. 
* Gives 'some idea of the issues faced by users with visual impairments.'
* Hannah also runs an accessibility clinic for civil servants to chat through concerns or ideas.
:::

## {background-image='images/website_rap-strategy.png'}

::: {.notes}
* We can help make users' lives better with better spreadsheets. But there's also a way to make out lives easier as producers.
* [Reproducible Analytical Pipelines (RAP)](https://analysisfunction.civilservice.gov.uk/support/reproducible-analytical-pipelines/) is a grassroots movement that's been bubbling around UK government for a few years.
* RAPs are 'automated statistical and analytical processes [that] incorporate elements of software engineering best practice to ensure that the pipelines are reproducible, auditable, efficient, and high quality.'
* There's now [a formal strategy for adoption](https://analysisfunction.civilservice.gov.uk/policy-store/reproducible-analytical-pipelines-strategy/) that should empower publishers to improve their outputs.
:::

# Building a tool

::: {.notes}
* Many teams have applied the advice to their publications
* There are still opportunities
* How can we make things easier:
  - as part of a RAP?
  - for entry-level coders?
  - by taking into account the realities of 'at the coalface' production?
  - by taking the initiative?
  - to prevent duplication of effort?
:::

## Requirements {.center}

1. Simple
2. Opinionated
3. Compliant
4. Known

::: {.notes}
1. Simple user-interface/API, internal structure should be understood by devs
2. Decisions should be taken for you to help speed things up and maintain consistency.
3. The whole point is to meet the guidance, {a11ytables} accessibility checklist vignette.
4. Should try to be a generic cross-government, unified solution to prevent duplicated effort (perhaps easier for my department, which is a the centre of government).
:::

## {background-image='images/website_a11ytables-docs.png'}

::: {.notes}
* [Documentation](https://co-analysis.github.io/a11ytables/).
* Bottom-up to solve my own needs, with wider implications.
1. Simple: interface has only two main functions; only two dependencies are {openxlsx} and {pillar}; familiarity of dataframes and pipes; user brings data and information, {a11ytables} does the rest.
2. Opinionated: some flexibly lost, not all spreadsheets are simple, but you can intervene.
3. Compliant: a vignette compares the package's functionality to to the accessibility checklist in the guidance.
:::

## {background-image='images/website_gptables-docs.png'}

::: {.notes}
* [Documentation](https://gptables.readthedocs.io/en/latest/)
* Written for Python, convert pandas dataframes.
* {a11ytables} was created to comply with the _latest_ best practice guidance for releasing stats in spreadsheets, which gptables did not do at the time.
* Can be accessed from R via the {reticulate} package, but requires a Python installation and understanding of {reticulate}.
* Slight differences between {a11ytables} and gptables exist, hopefully will clear these up.
:::

# How 

## Install {auto-animate='true'}

```{r}
install.packages("remotes")

remotes::install_github(
  "co-analysis/a11ytables",
  build_vignettes = TRUE
)

library(a11ytables)
```

::: {.notes}
* GitHub only for now.
* Is this a barrier in some orgs?
* Still in development, but it has reached version 0.1.
* CRAN is a future goal, maybe.
:::

## Overview {auto-animate='true'}

```{r}
create_a11ytable() |>
  generate_workbook() |>
  openxlsx::saveWorkbook()
```

::: {.notes}
1. Organise all the required information into a special dataframe with additional class 'a11ytable'
1. Convert to {openxlsx} 'Workbook' class with structure and style information
1. Write that object to an xlsx file
:::

## Overview {auto-animate='true'}

```{r}
create_a11ytable(
  tab_titles, sheet_types, sheet_titles, # required char vectors
  blank_cells, sources,                  # optional char vectors
  tables                                 # required listcol of dataframes
) |>
  generate_workbook() |>
  openxlsx::saveWorkbook("file.csv")
```

::: {.notes}
* The `create_a11ytable()` function takes a few arguments:
  - `tab_titles` is a required character vector for the text that goes on the tabs
  - `sheet_types` is a required character vector (one of `"cover"`, `"contents"`, `"notes"`, `"tables"`) that provides information about how the sheet will be styled
  - `sheet_titles` is a required character vector of the worksheet titles that will go in cell A1
  - `blank_cells` optional character vector of meta-information that explains the meaning of any blank cells in the sheet
  - `sources` is an optional character vector of meta-information that contains 
  - `tables` is a required list-column of dataframes that contain the main bulk of each sheet (stats tables are obviously tables, but the cover and notes are also given as tables; you also provide the cover as a dataframe, where each row becomes a subsection with a title and body)
:::

## Prep {auto-animate='true'}

```{r}
#| eval: true
source("eggs/eggs.R")
```

::: {.notes}
* I pre-wrote some code to extract data from the eggs spreadsheet.
* You can find the code and original spreadsheet in [the repo that hosts these slides](https://www.github.com/matt-dray/earl22-presentation).
* Importantly, I didn't mimic the whole process of production for this example; I just copied the data out of the pre-existing spreadsheet.
:::

## Prep {auto-animate='true'}

```{r}
#| eval: true
source("eggs/eggs.R")
ls()
```

::: {.notes}
* The code outputs some objects that are ready to be passed to the arguments of `create_a11ytable()`.
* I recommend generating each object outside of the call to `create_a11ytable()` where possible; it keeps things cleaner.
:::

## Prep {auto-animate='true'}

```{r}
#| eval: true
source("eggs/eggs.R")
ls()
egg_sheet_titles
```

::: {.notes}
* Here's `the sheet_titles` object, which is a required character vector that contains the titles of each worksheet, for example.
:::

## Create {auto-animate='true'}

```{r}
egg_at <- create_a11ytable()
```

::: {.notes}
* Now we can pass our egg objects to the arguments of `create_a11ytable()`.
:::

## Create {auto-animate='true'}

```{r}
#| eval: true
egg_at <- create_a11ytable(
  tab_titles   = egg_tab_titles, 
  sheet_types  = egg_sheet_types, 
  sheet_titles = egg_sheet_titles,
  blank_cells  = egg_blank_cells, 
  sources      = egg_sources,
  tables       = egg_tables
)
```

::: {.notes}
* Basically, each arg becomes a column in a dataframe.
* User is warned and/or errors raised and/or corrections applied if the provided information is insufficient.
* User provides the info, function does the rest.
:::

## Create {auto-animate='true'}

```{r}
#| eval: true
egg_at <- create_a11ytable(
  tab_titles   = egg_tab_titles, 
  sheet_types  = egg_sheet_types, 
  sheet_titles = egg_sheet_titles,
  blank_cells  = egg_blank_cells, 
  sources      = egg_sources,
  tables       = egg_tables
)

class(egg_at)
```

::: {.notes}
* You can see that the object gets the special 'a11ytables' S3 class, which helps with validation.
* But it also has classes of 'tbl' (i.e. a {tibble} dataframe) and classic 'data.frame'.
* This means you can manipulate the output much like any dataframe object.
:::

## A dataframe? {auto-animate='true'}

```{r}
#| echo: true
#| eval: true
egg_at
```

::: {.notes}
* Familiar dataframe structure holds all the information.
* You can see a row per sheet.
* Each argument has become a column.
* The list of dataframes has become a list-column.
:::

## A row {auto-animate='true'}

```{r}
#| echo: true
#| eval: true
str(egg_at[egg_at$tab_title == "Table_2", ] )
```

::: {.notes}
* Each row of the a11ytable is the content required to create a worksheet.
* Here's the information needed for the sheet that contains Table 2.
* You can see the character vectors contain the information needed in that sheet, along with the dataframe that contains the stat table itself.
:::

## Workbook {auto-animate='true'}

```{r}
#| eval: true
egg_wb <- generate_workbook(egg_at)
class(egg_wb)
```

::: {.notes}
* Next step is to turn the a11ytable-class object into an {openxlsx} Workbook-class object.
* This adds all the required structure and style information without the user needing to do anything.
* Works with a series of underlying `add_*()` functions to add elements to each sheet and `style_*()` functions that do simple stuff like adjust the font, but also dynamically change column widths and detect numeric columns that are stored as character due to notes or shorthand.
:::

## Workbook {auto-animate='true'}

```{r}
#| eval: true
egg_wb
```

::: {.notes}
* Doesn't really matter what the Workbook-class object looks like, but the summary shows the worksheets that have been created and some of the custom changes, like row heights.
:::

## Write {auto-animate='true'}

```{r}
openxlsx::saveWorkbook(
  egg_wb,
  "eggs/2022-07-28_eggs-packers_test.xlsx",
  overwrite = TRUE
)
```

::: {.notes}
* {openxlsx} already has a function to write a Workbook-class object to disk.
* This saves us hassle.
:::

## Write {auto-animate='true'}

```{r}
#| eval: true
openxlsx::saveWorkbook(
  egg_wb,
  "eggs/2022-07-28_eggs-packers_test.xlsx",
  overwrite = TRUE
)

list.files("eggs", pattern = ".xlsx$")
```

::: {.notes}
* The file has been provably created at the location specified.
:::

# Output 

## {auto-animate=true auto-animate-easing='ease-in-out' background-image='images/spreadsheet_new-eggs-cover.png'}

![](images/not-clippy-heart.png){.absolute top='40%' left='35%' width='100'}

::: {.notes}
* Most of this information was in the 'information' tab or footnotes of the original spreadsheet.
* Now it's up front and provides an introduction to the workbook.
* Note on the cover that:
  - the font is Arial 12
  - the title is in larger font and in A1
  - the font subsection headers are also adjusted
  - the subsection titles are in tall rows to create the illusion of whitespace without leaving an empty row
:::

## {auto-animate=true auto-animate-easing='ease-in-out' background-image='images/spreadsheet_new-eggs-contents.png'}

![](images/not-clippy-heart.png){.absolute top='2%' left='25%' width='100'}

::: {.notes}
* Note in the contents that:
  - there is up-front screenreader-friendly information about the number of tables in the sheet
  - the table has no empty rows or columns
  - the columns have clear header names indicated by bold font
  - the table is marked up as a table (there's a small marker in the lower right to indicate this), which is important
:::

## {auto-animate=true auto-animate-easing='ease-in-out' background-image='images/spreadsheet_new-eggs-notes.png'}

![](images/not-clippy-heart.png){.absolute top='20%' left='35%' width='100'}

::: {.notes}
* On the notes page, note that:
  - the theming follows on from the cover and contents
  - the notes are in the standardised style of 'note x' written in square brackets
:::

## {auto-animate=true auto-animate-easing='ease-in-out' background-image='images/spreadsheet_new-eggs-t1.png'}

![](images/not-clippy-heart.png){.absolute top='3%' left='35%' width='100'}

::: {.notes}
* Note in Table 1 that:
  - the theming again follows on from the other sheets
  - there is a new metadata element that provides the data source
  - the table has been dynamically placed in row 4 this time, after the three pre-table elements (was only two for the contents and notes pages)
:::

## {auto-animate=true auto-animate-easing='ease-in-out' background-image='images/spreadsheet_new-eggs-t2.png'}

![](images/not-clippy-heart.png){.absolute  top='5%' left='35%' top=20 left=400 width='100'}

::: {.notes}
* Note in Table 2 that:
  - this table has a note in it, so there's a new dynamically generated pre-table metadata row so users of screenreaders can be made aware early 
  - the placement of the table is again dynamic; there are four pre-table metadata elements, so the table begins in row 5
:::

## {auto-animate=true auto-animate-easing='ease-in-out' background-image='images/spreadsheet_new-eggs-t5.png'}

![](images/not-clippy-heart.png){.absolute  top='30%' left='15%' width='100'}

::: {.notes}
* Table 5 has something different again, which is that the long header has led to an opinionated decision for the column to be widened
* An extra pre-table metadata row would also appear if we had provided information to the `blank_cells` argument of `create_a11ytable()`
:::

# But 

## Not perfect {.center}

* User-input
* Opinionated
* User-testing

::: {.notes}
* The package doesn't get you a 100% compliant output.
* Can't guarantee bad user input.
* To keep the package simple, certain choices may not suit the user; some extra editing of the a11ytable or Workbook may be required, but this can be made part of the analyst pipeline.
* The package is opinionated for simplicity and is not completely flexible as a result (e.g. each cover subsection has only a single body row, the pre-table metadata is only table count, note presence, blank-cell meaning and data source).
* The package is not yet fully user tested.
* Leave an issue or pull request.
:::

## Clunk {.center}

* Not ods
* {openxlsx} has limitations
* Notes

::: {.notes}
* In particular, published spreadsheets should be in an open format, but {openxlsx} nor other packages write Workbook-class objects to ODS.
* {openxlsx} is versatile, but some things are tricky (placeholder zeroes in decimals, filling in file properties, etc), but I'm keeping an eye on {openxlsx2}.
* A more focused example: notes are pretty clunky to add; might be a better solution?
* Leave an issue or pull request.
:::

## Future {.center}

* Bugfixes, requests
* Mirror gptables output?
* YAML input?

::: {.notes}
* There's plenty to be done to improve the package.
* As ever, user feedback and bugs.
* gptables and a11ytables should converge as much as possible so that analyst users can expect the same compliant output despite which tool they use. What are the optimum opinionated features?
* The problem is I have no time!
:::

# If all else fails 

::: {.notes}
* The idea is to fix the problem at the source..
* But this won't be possible for older spreadsheets and for pipelines that have inertia.
* What can you do?
:::

## {background-image='images/website_smungs.png'}

::: {.notes}
* [Spreadsheet Munging Strategies](https://nacnudus.github.io/spreadsheet-munging-strategies/) by another colleague, [Duncan Garmonsway](https://nacnudus.github.io/duncangarmonsway/).
* Untidy, inaccessible spreadsheets pose a particular problem for further analysis.
* See Duncan's [{tidyxl}](https://nacnudus.github.io/tidyxl/index.html) and [{unpivotr}](https://nacnudus.github.io/unpivotr/) R packages.
* I want to help limit the need for these tools (sorry Duncan).
:::

## Consider  

1. How could you improve user experience?
1. Do you have the right processes in place?
1. Could you create tools to remove friction?

## tl;dr {.center}

:::: {.columns}

::: {.column width='70%'}
Generate best-practice spreadsheets with [{a11ytables}](https://www.co-analysis.github.io/a11ytables)

Make the world a better place (marginally)
:::

::: {.column width='30%'}
![](images/qr_a11ytables-docs.png){alt="QR code that points to the documentation website of the R package 'a11ytables'."}
:::

::::
