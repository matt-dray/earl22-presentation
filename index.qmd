---
title: '{a11ytables}'
subtitle: 'EARL, September 2022'
author: 'Matt Dray, Civil Service'
format:
  revealjs: 
    theme: [default, earl22.scss]
    footer: 'WORK IN PROGRESS'
    title-slide-attributes:
      data-background-image: 'images/bg_cells.png'
      data-background-size: '250px'
      data-background-repeat: 'repeat'
execute:
  echo: true
  eval: false
---

```{r setup}
#| include: false
#| eval: true
options(width = 80)
library(a11ytables)
```

## tl;dr {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

:::: {.columns}

::: {.column width="60%"}

Generate best-practice spreadsheets in R with {a11ytables}

[co-analysis.github.io/a11ytables](https://www.co-analysis.github.io/a11ytables)
:::

::: {.column width="40%"}
![](images/qr_a11ytables-docs.png){width="250" alt="QR code that points to the documentation website of the R package 'a11ytables'."}
:::

::::

::: {.notes}
* This is a story about about R, of course.
* But it's also about taking initiative.
* About inclusivity.
* About making things better.
:::

## Me {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

R and reproducibility in the UK Civil Service

Make people happier 

<br>

`r fontawesome::fa('globe')` [matt-dray.com](https://www.matt-dray.com)

`r fontawesome::fa('twitter')` [@mattdray](https://www.twitter.com/mattdray)

`r fontawesome::fa('github')` [matt-dray](https://www.github.com/matt-dray)

`r fontawesome::fa('pen')` [rostrum.blog](https://www.rostrum.blog)

::: {.notes}
* I work in UK government and talking about something I made in that official capacity
* I personally can be found elsewhere in an unofficial capacity
:::

# An opportunity {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

::: {.notes}
* An example of a government spreadsheet that could be improved
* The intent is to demonstrate opportunity, not to call anyone out
:::

## {background-image='images/website_eggs.png'}

::: {.notes}
* Defra's 'Latest UK egg statistics'
* Branded as National Statistics
* [Link to page](https://www.gov.uk/government/statistics/egg-statistics)
:::

## {background-image='images/spreadsheet_eggs-1.png'}

::: {.notes}
* This is the 'UK egg packing station throughput and prices dataset' spreadsheet
* First tab: 'Packers'
* Issues include:
- empty rows, columns, cells (including A1)
- double headers
- centred values, mostly
- notes in a footer (offscreen)
- gridlines sometimes missing, sometimes not
- the number of decimals varies (though Excel hides this)
- there's some stray values with no explanation
:::

## {background-image='images/spreadsheet_eggs-2.png'}

::: {.notes}
* Second tab: 'Packers_Annual'
* Issues are same as previous tab
* We also have some rogue values on the far right?
:::

## {background-image='images/spreadsheet_eggs-3.png'}

::: {.notes}
* Third tab: 'Information'
* Issues include:
- important information on the last page instead of a vocer
- information is in text boxes rather than cells
- update information placement has moved
- GOV.UK link way off to the right
:::

# Support {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

## {background-image='images/website_spreadsheet-guidance-af.png'}

::: {.notes}
* [Link to page](https://analysisfunction.civilservice.gov.uk/policy-store/releasing-statistics-in-spreadsheets/)
* The Analysis Function has advice focused on releasing data in spreadsheet format
:::

<!--
## {background-image='images/website_af-empathy.png'}
-->

## {background-image='images/spreadsheet_empathy-hidden.png'}

::: {.notes}
* Hannah wrote [a great blog](https://analysisfunction.civilservice.gov.uk/blog/accessibility-empathy-for-users-of-spreadsheets/) about accessibility empathy for spreadsheet users.
* Can you find information in a spreadsheet where all the cells are blacked out?
* It 'shows you what it is like trying to navigate a data table when you cannot see the layout. 
* Gives 'some idea of the issues faced by users with visual impairments.'
:::

<!--

# Another opportunity {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

::: {.notes}
* We can take steps to improve accessibility
* But maybe the issue is driven partly by processes?
* Maybe we can review _how_ the spreadsheet gets produced
:::

## Steps to publish {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

1. Prepare and save individual tables
2. Copy-paste into spreadsheet
3. Format

::: {.incremental}
4. Spot a mistake
5. Repeat the above
6. Publish (fingers-crossed)
:::

::: {.notes}
* Problem: inertia, risk
* Stattos already have systems in place
* Time consuming to rework production pipeline
* Everyone can perform point-and-click tasks 
:::

# Top-down support {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

::: {.notes}
* It's easy to complain
* What are we doing about it?
:::

-->

## {background-image='images/website_rap-strategy.png'}

::: {.notes}
* [Link to page](https://analysisfunction.civilservice.gov.uk/policy-store/reproducible-analytical-pipelines-strategy/)
* Reproducible Analytical Pipelines (RAP) is a grassroots movement that's been bubbling around UK government for a few years
* It's even spread to other countries and to non-governmental organisations
* RAPs are 'automated statistical and analytical processes [that] incorporate elements of software engineering best practice to ensure that the pipelines are reproducible, auditable, efficient, and high quality.'
* Automated and version controlled with open software
* If you're producing a spreadsheet, it's production should be part of a RAP!
:::

# Initiative {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

::: {.notes}
* Many teams have applied the advice to their publications
* There are still opportunities
* How can we make things easier:
- as part of a RAP?
- for entry-level coders?
- by taking into account the realities of 'at the coalface' production?
- by taking the initiative?
- to prevent duplication of effort?
:::

## {background-image='images/website_gptables-docs.png'}

::: {.notes}
* [Link to page](https://gptables.readthedocs.io/en/latest/)
* This is a 'bottom-up' approach, but is 'official' in that it's produced by the Analysis Function
* Written for Python, convert pandas dataframes
* Can be accessed from R via the {reticulate} package, but requires a Python installation and understanding of {reticulate}
:::

## {background-image='images/website_a11ytables-docs.png'}

::: {.notes}
* [Link to page](https://co-analysis.github.io/a11ytables/)
* Bottom-up to solve my own needs, with wider implications
* R-native solution
* Created to comply with the _latest_ best practice guidance for releasing stats in spreadsheets, which gptables did not do at the time
* Slight differences to gptables that may be cleared up with time
:::

## Requirements {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

1. Simple
2. Opinionated
3. Compliant

::: {.notes}
* Should be simple for end-user, developer
* Simplicity means decisions must be made on behalf of the user
* Should meet the guidance
:::

## 1. Simple {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

* Suitable for beginner-level R users
* Automatic, everything taken care of
* Only two main functions in the package
* Familiar dataframes, pipeable
* Two dependencies: {openxlsx}, {pillar}
* Dev-friendly?

## 2. Opinionated {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

* Enforcement is good
* Styles and layout enforced to meet guidance
* Some choices have to be made, like pre-table metadata
* Some flexibly lost, not all spreadsheets are simple
* But you can amend the a11ytable and Workbook

## 3. Compliant {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

* The whole point is to meet the guidance
* {a11ytables} accessibility checklist vignette
* Handles compliance consistently, without fail

# Example {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

## Install {auto-animate='true' background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

```{r}
install.packages("remotes")

remotes::install_github(
  "co-analysis/a11ytables",
  build_vignettes = TRUE
)

library(a11ytables)
```

::: {.notes}
* GitHub only for now
* Is this a barrier in some orgs?
* Still in development, but it has reached version 0.1
* CRAN is a future goal, maybe
:::

## Overview {auto-animate='true' background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

```{r}
create_a11ytable() |>
  generate_workbook() |>
  openxlsx::saveWorkbook()
```

::: {.notes}
1. Organise all the required information into a special dataframe with additional class 'a11ytable'
1. Convert to {openxlsx} 'Workbook' class with structure and style information
1. Write that object to an xlsx file
:::

## Overview {auto-animate='true' background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

```{r}
create_a11ytable(
  tab_titles, sheet_types, sheet_titles, # required char vectors
  blank_cells, sources,                  # optional char vectors
  tables                                 # required listcol of dataframes
) |>
  generate_workbook() |>
  openxlsx::saveWorkbook()
```

::: {.notes}
* The `create_a11ytable()` function takes a few arguments:
  - `tab_titles` is a required character vector for the text that goes on the tabs
  - `sheet_types` is a required character vector (one of `"cover"`, `"contents"`, `"notes"`, `"tables"`) that provides information about how the sheet will be styled
  - `sheet_titles` is a required character vector of the worksheet titles that will go in cell A1
  - `blank_cells` optional character vector of meta-information that explains the meaning of any blank cells in the sheet
  - `sources` is an optional character vector of meta-information that contains 
  - `tables` is a required list-column of dataframes that contain the main bulk of each sheet, particularly the tables of statistical data that go into sheets with `sheet_type = "tables"`
:::

## Prep {auto-animate='true' background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

```{r}
#| eval: true
source("eggs/eggs.R")
```

::: {.notes}
* I pre-wrote some code to extract data from the eggs spreadsheet.
* You can find the code and original spreadsheet in [the repo that hosts these slides](https://www.github.com/matt-dray/earl22-presentation).
* Importantly, I didn't mimic the whole process of production for this example; I just copied the data out of the pre-existing spreadsheet.
:::

## Prep {auto-animate='true' background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

```{r}
#| eval: true
source("eggs/eggs.R")
ls()
```

::: {.notes}
* The code outputs some objects that are ready to be passed to the arguments of `create_a11ytable()`.
* I recommend generating each object outside of the call to `create_a11ytable()` where possible; it keeps things cleaner.
:::

## Create an a11ytable {auto-animate='true' background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

```{r}
egg_at <- create_a11ytable()
```

::: {.notes}
* Now we can pass our egg objects to the arguments of `create_a11ytable()`.
:::

## Create an a11ytable {auto-animate='true' background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

```{r}
#| eval: true
egg_at <- create_a11ytable(
  tab_titles   = egg_tab_titles, 
  sheet_types  = egg_sheet_types, 
  sheet_titles = egg_sheet_titles,
  blank_cells  = egg_blank_cells, 
  sources      = egg_sources,
  tables       = egg_tables
)
```

::: {.notes}
* Basically just creates a dataframe from the args
* Validates, warns, errors, corrects
:::

## Create an a11ytable {auto-animate='true' background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

```{r}
#| eval: true
egg_at <- create_a11ytable(
  tab_titles   = egg_tab_titles, 
  sheet_types  = egg_sheet_types, 
  sheet_titles = egg_sheet_titles,
  blank_cells  = egg_blank_cells, 
  sources      = egg_sources,
  tables       = egg_tables
)

class(egg_at)
```

::: {.notes}
* You can see that the object gets the special a11ytables class.
* But it also has classes of 'tbl' (i.e. a {tibble} dataframe) and classic 'data.frame'.
* This means you can manipulate the output much like any dataframe object.
:::

## Just a dataframe {auto-animate='true' background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

```{r}
#| echo: true
#| eval: true
head(egg_at)
```

::: {.notes}
* Familiar dataframe structure holds all the information.
* You can see a row per sheet.
* Each argument has become a column.
* The list of dataframes has become a list-column.
:::

## A row {auto-animate='true' background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

```{r}
#| echo: true
#| eval: true
str(egg_at[egg_at$tab_title == "Table_2", ] )
```

::: {.notes}
* Each row of the a11ytable is the content required to create a worksheet.
* Here's the information needed for the sheet that contains Table 1.
:::

## Generate a workbook {auto-animate='true' background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

```{r}
#| eval: true
egg_wb <- generate_workbook(egg_at)
class(egg_wb)
```

::: {.notes}
* Creates an {openxlsx} Workbook-class object.
* Contains all the structure and style information to make a workbook.
* This object can be written directly to xlsx.
* There's already a function in {openxlsx} to write.
* Didn't combine these steps so that the user can inspect and adjust the Workbook-class object if they wish.
:::

## Output to xlsx {auto-animate='true' background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

```{r}
#| eval: true
openxlsx::saveWorkbook(
  egg_wb,
  "eggs/2022-07-28_eggs-packers.xlsx",
  overwrite = TRUE
)
```

::: {.notes}

:::

## Output to xlsx {auto-animate='true' background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

```{r}
#| eval: true
openxlsx::saveWorkbook(
  egg_wb,
  "eggs/2022-07-28_eggs-packers.xlsx",
  overwrite = TRUE
)

list.files("eggs", pattern = ".xlsx$")
```

::: {.notes}
* The file has been created at the location specified.
:::

## {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

::: {.notes}
* Preview of each sheet in the workbook.
* Attention to:
  - workbook structure: cover, contents, notes, tables
  - sheet structure: title, pre-table elements, table
  - marked up tables
  - no empty rows, columns
:::



## RStudio Addin {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

* Inserts skeletons for you
* With data.frames or tibbles
* Parts of workflow (table prep, pre-filled create_a11ytable call) or full workflow

::: {.notes}
* Another way to limit friction
* {tibble}-based option included
:::

# But {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

## Limitations {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

* Saves to xlsx, not ODS
* Can't update properties
* Some flexibility lost in e.g. cover layout
* Surely it's still better to get 95% of the way there?
* Human should always be checking anyway

# Future {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

## Todo {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

* ODS conversion (command line?)
* YAML input (easier to provide text inputs)
* 'Advanced' input?
* Arbitrary, but controlled, pre-table meta?
* User research
* Bugfixes
* Features (in line with guidance)
* When I have the time

# If all else fails {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

::: {.notes}
:::

## {background-image='images/website_smungs.png'}

::: {.notes}
* [Link to page](https://nacnudus.github.io/spreadsheet-munging-strategies/)
* Untidy, inaccessible spreadsheets pose a particular problem for further analysis
* See [Duncan Garmonsway]()'s [{tidyxl}]() and [{unpivotr}]() R packages for help
* I want to help limit the need for these tools (sorry Duncan)
:::

## Consider  {background-image='images/bg_cells.png' background-size='250px' background-repeat='repeat'}

1. How could you improve user experience?
1. Do you have the right processes in place?
1. Could you create tools to remove friction?